plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    // Add the Google services Gradle plugin
    id "com.google.gms.google-services"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def dartDefines = [:]
if (project.hasProperty('dart-defines')) {
    // Decode dart-defines, which are comma-separated and encoded in Base64, and store them in a variable.
    dartDefines = dartDefines + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=', 2)
                [(pair.first()): pair.last()]
            }
}

def envVariables = [
        API_KEY: project.hasProperty('API_KEY')
                ? API_KEY
                : "${dartDefines.API_KEY}",
]

android {
    namespace = "com.breez.liquid.l_breez"
    compileSdkVersion 35
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId = "com.breez.liquid.l_breez"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion 33
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    // Creates a variable called keystorePropertiesFile, and initializes it to the
    // keystore.properties file.
    def keystorePropertiesFile = rootProject.file("keystore.properties")

    // Initializes a new Properties() object called keystoreProperties.
    def keystoreProperties = new Properties()

    // Loads the keystore.properties file into the keystoreProperties object.
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        debug {
            String filePath = keystoreProperties["storeFileDebug"]
            if (filePath != null) {
                keyAlias = keystoreProperties["keyAliasDebug"]
                keyPassword = keystoreProperties["keyPasswordDebug"]
                storeFile = file(filePath)
                storePassword = keystoreProperties["storePasswordDebug"]
            } else {
                println("No storeFile provided, debug builds are using your local debug keystore")
            }
        }

        release {
            String filePath = keystoreProperties["storeFile"]
            if (filePath != null) {
                keyAlias = keystoreProperties['keyAlias']
                keyPassword = keystoreProperties['keyPassword']
                storeFile = file(filePath)
                storePassword = keystoreProperties['storePassword']
            } else {
                String storeFilePath = System.getenv("STORE_FILE")
                println("storeFilePath: " + storeFilePath)
                if (storeFilePath != null) {
                    println("using key properties from environment")
                    keyAlias = System.getenv("KEY_ALIAS")
                    keyPassword = System.getenv("KEY_PASSWORD")
                    storeFile = file(storeFilePath)
                    storePassword = System.getenv("STORE_PASSWORD")
                } else {
                    println("No storeFile provided, release builds are using your local debug keystore")
                }
            }
        }
    }

    buildTypes {
        debug {
            signingConfig = signingConfigs.debug
            manifestPlaceholders = [appName: "Misty Breez - Debug"]
            resValue "string", "breezApiKey", envVariables.API_KEY
            minifyEnabled = false
            shrinkResources = false
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-DEBUG"
        }
        release {
            signingConfig = signingConfigs.release
            manifestPlaceholders = [appName: "Misty Breez"]
            resValue "string", "breezApiKey", envVariables.API_KEY
            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type. Make sure to use a build
            // variant with `debuggable false`.
            minifyEnabled = true

            // Enables resource shrinking, which is performed by the
            // Android Gradle plugin.
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    /* FCM */
    implementation 'com.google.firebase:firebase-messaging:23.4.1'
    /* Logging */
    implementation 'org.tinylog:tinylog-api-kotlin:2.6.2'
    implementation 'org.tinylog:tinylog-impl:2.6.2'
}
